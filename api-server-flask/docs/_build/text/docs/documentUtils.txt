documentUtils module
********************

documentUtils.createNewDocument(document_name, parent_folder, proj_id, data, commit_id, user_email)

   **Explanation:**
      Creates a new document with an initial snapshot

   **Args:**
      -document_name (int): name of the document -parent_folder (int):
      id of the document's parent folder -proj_id (int): id of the
      project this is for -data (int): content of the document's first
      and only snapshot -commit_id (int): commit this is happening on
      -user_email (str): Email of the user

   **Returns:**
      -doc_id (int): id of the newly created document

documentUtils.deleteDocumentFromCommit(doc_id, commit_id)

   **Explanation:**
      Deletes a document from a commit. The document will persist in
      other existing commits

   **Args:**
      -doc_id (int): id of the document to delete -commit_id (int): id
      of the commit to delete from

   **Returns:**
      -success (bool): success -error message (str): if there was an
      error, returns the message, if not, returns None

documentUtils.getAllDocumentCommittedSnapshotsInOrder(doc_id)

   **Explanation:**
      Gets all of the document's commited snapshots in order of when
      they were created

   **Args:**
      -doc_id (int): id of the document

   **Returns:**
      -listOfSnapshots (list): list of Snapshot objects as dicts

documentUtils.getAllDocumentCommittedSnapshotsInOrderIncludingWorking(doc_id, working_commit_id)

   **Explanation:**
      Gets all of the document's commited snapshots in order of when
      they were created. Adds on the unique snapshot from the given
      working commit, if it exists

   **Args:**
      -doc_id (int): id of the document

   **Returns:**
      -listOfSnapshots (list): list of Snapshot objects as dicts

documentUtils.getDocumentInfo(doc_id, commit_id)

   **Explanation:**
      Gets a document's information from a specific commit

   **Args:**
      -doc_id (int): id of the document -commit_id (int): id of the
      commit

   **Returns:**
      -document (dict): A Document object as a dict with
      ItemCommitLocation object "parent_folder" and "name" fields
      added

documentUtils.getDocumentInfoViaLocation(name, parent_folder, commit_id)

   **Explanation:**
      Gets a document's information from a specific commit using the
      name and parent folder instead of id

   **Args:**
      -name (str): name of the document -parent_folder (int): id of
      the document's parent folder -commit_id (int): id of the commit

   **Returns:**
      -document (dict): A Document object as a dict with
      ItemCommitLocation object "parent_folder" and "name" fields
      added

documentUtils.getDocumentLastCommittedSnapshotContent(doc_id)

   **Explanation:**
      Gets the latest committed snapshot's contents for a document

   **Args:**
      -doc_id (int): id of the document

   **Returns:**
      -snapshotContents (bytes): the contents of the latest snapshot

documentUtils.getDocumentLastSnapshot(doc_id)

   **Explanation:**
      Gets the latest committed snapshot for a document

   **Args:**
      -doc_id (int): id of the document

   **Returns:**
      -snapshot (dict): A Snapshot object as a dict

documentUtils.getDocumentProject(doc_id)

   **Explanation:**
      Gets a document's project's id

   **Args:**
      -doc_id (int): id of the document

   **Returns:**
      -proj_id (int): The id of the project the document belongs to

documentUtils.purgeDocumentUtil(doc_id)

   **Explanation:**
      Deletes a document from the database entirely. This also deletes
      associated snapshots and comments.

   **Args:**
      -doc_id (int): id of the document to delete

   **Returns:**
      -success (bool): success -error message (str): if there was an
      error, returns the message, if not, returns None
