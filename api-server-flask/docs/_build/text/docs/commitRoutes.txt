commitRoutes module
*******************

commitRoutes.approveCommit(commit_id)

   "GET /api/Commit/<commit_id>/approve/"

   **Explanation:**
      Sets the commit as approved. Enforces permissions through
      credentials given in Authorization header.

   **Args:**
      * commit_id (int): id of the commit

   **Returns:**
      A dictionary containing the following keys:
         * success (bool): Indicates whether the operation was
           successful.

         * reason (str): Description of the success or failure reason.

         * body (int): the id of the commit

commitRoutes.closeCommit(commit_id)

   "GET /api/Commit/<commit_id>/close/"

   **Explanation:**
      Sets the commit as closed. Enforces permissions through
      credentials given in Authorization header.

   **Args:**
      * commit_id (int): id of the commit

   **Returns:**
      A dictionary containing the following keys:
         * success (bool): Indicates whether the operation was
           successful.

         * reason (str): Description of the success or failure reason.

         * body (int): the id of the commit

commitRoutes.commitCommit(commit_id)

   "POST /api/Commit/<commit_id>/commitCommit/"

   **Explanation:**
      Commits a commit. Also sets the commit as open. Enforces
      permissions through credentials given in Authorization header.

   **Args:**
      * commit_id (int): id of the commit

      * request.body (dict):
           * name (str): what the user is naming the newly committed
             commit

   **Returns:**
      A dictionary containing the following keys:
         * success (bool): Indicates whether the operation was
           successful.

         * reason (str): Description of the success or failure reason.

         * body (int): the id of the commit

commitRoutes.createCommit(proj_id)

   "POST /api/Commit/<proj_id>/createCommit/"

   **Explanation:**
      Creates a working commit. Enforces permissions through
      credentials given in Authorization header.

   **Args:**
      * proj_id (int)): the id of the project the commit is for

      * request.body (dict):
           * last_commit (int): Optional; the committed this new
             commit will be based off of, if not provided will be
             empty

   **Returns:**
      A dictionary containing the following keys:
         * success (bool): Indicates whether the operation was
           successful.

         * reason (str): Description of the success or failure reason.

         * body (int): The id of the newly created commit

commitRoutes.deleteWorkingCommit(proj_id)

   "DELETE /api/Commit/<proj_id>/workingCommit/"

   **Explanation:**
      Deletes the working commit of the user (derived from credentials
      in authorization). Enforces permissions through credentials
      given in Authorization header.

   **Args:**
      * proj_id (proj_id): id of the project the commit is getting
        deleted

   **Returns:**
      A dictionary containing the following keys:
         * success (bool): Indicates whether the operation was
           successful.

         * reason (str): Description of the success or failure reason.

commitRoutes.getAllLatestCommitComments(proj_id)

   "GET /api/Commit/<proj_id>/getLatestComments/"

   **Explanation:**
      Gets all comments associated with snapshots that are associated
      with the latest committed commit of the project. Enforces
      permissions through credentials given in Authorization header.

   **Args:**
      * proj_id (int): id of the project

   **Returns:**
      A dictionary containing the following keys:
         * success (bool): Indicates whether the operation was
           successful.

         * reason (str): Description of the success or failure reason.

         * body (list): A list of unresolved Comment objects in the
           form of dicts

commitRoutes.getCommitDocumentSnapshotPairs(commit_id)

   "GET /api/Commit/<commit_id>/"

   **Explanation:**
      Gets all the snapshots associated with the documents in a
      commit. Enforces permissions through credentials given in
      Authorization header.

   **Args:**
      * commit_id (int): id of the commit

   **Returns:**
      A dictionary containing the following keys:
         * success (bool): Indicates whether the operation was
           successful.

         * reason (str): Description of the success or failure reason.

         * body (dict): A dict with the keys of documents ids mapping
           to their snapshot ids

commitRoutes.getCommitFolderTree(commit_id)

   "GET /api/Commit/<commit_id>/getFolderTree/"

   **Explanation:**
      Gets all the items in a commit in a tree structure. Enforces
      permissions through credentials given in Authorization header.

   **Args:**
      * commit_id (int): id of the commit

   **Returns:**
      A dictionary containing the following keys:
         * success (bool): Indicates whether the operation was
           successful.

         * reason (str): Description of the success or failure reason.

         * body (dict): The top level of the dict is a Folder object
           represented as a dict. It has the added key of "contents",
           which maps to another dict, which has 2 keys of "folders"
           and "documents". These keys map to lists of dicts of their
           respective items within the folder. Both item dicts have
           the "seenSnapshots" and "seenComments" key added, which
           represent whether or not the user has seen all
           snapshots/comments for that document. The folders also have
           the "contents" key added, which map to their own contents.

commitRoutes.getCommitInformation(commit_id)

   "GET /api/Commit/<commit_id>/info/"

   **Explanation:**
      Gets information about a commit. Enforces permissions through
      credentials given in Authorization header.

   **Args:**
      * commit_id (int): id of the commit

   **Returns:**
      A dictionary containing the following keys:
         * success (bool): Indicates whether the operation was
           successful.

         * reason (str): Description of the success or failure reason.

         * body (dict): A Commit object in the form of a dict

commitRoutes.getUserWorkingCommitForProject(proj_id)

   "GET /api/Commit/<proj_id>/workingCommit"

   **Explanation:**
      Gets information about the user's (derived from credentials in
      Authorization headers) working commit. Enforces permissions
      through credentials given in Authorization header.

   **Args:**
      * proj_id (int): id of the project

   **Returns:**
      A dictionary containing the following keys:
         * success (bool): Indicates whether the operation was
           successful.

         * reason (str): Description of the success or failure reason.

         * body (dict): A Commit object in the form of a dict

commitRoutes.setReviewedCommit(commit_id)

   "GET /api/Commit/<commit_id>/setReviewed/"

   **Explanation:**
      Sets a commit as reviewed. Enforces permissions through
      credentials given in Authorization header.

   **Args:**
      * commit_id (int): id of the commit

   **Returns:**
      A dictionary containing the following keys:
         * success (bool): Indicates whether the operation was
           successful.

         * reason (str): Description of the success or failure reason.

         * body (int): the id of the commit
