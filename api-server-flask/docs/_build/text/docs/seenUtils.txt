seenUtils module
****************

seenUtils.isCommentSeenByUser(comment_id, user_email)

   **Explanation:**
      Returns whether or not the given user had seen the given comment

   **Args:**
      -comment_id (int): id of the comment that is to be checked
      -user_email (str): email of the user

   **Returns:**
      -seen (bool): whether or not the given user had seen the given
      comment

seenUtils.isSnapshotAllCommentSeenByUser(snapshot_id, user_email)

   **Explanation:**
      Returns whether or not the given user had seen all comments on
      the given snapshot

   **Args:**
      -snapshot_id (int): id of the snapshot that is to be checked
      -user_email (str): email of the user

   **Returns:**
      -seen (bool): whether or not all comments on the snapshot are
      seen by the user

seenUtils.isSnapshotSeenByUser(snapshot_id, user_email)

   **Explanation:**
      Returns whether or not the given user had seen the given
      snapshot

   **Args:**
      -snapshot_id (int): id of the snapshot that is to be checked
      -user_email (str): email of the user

   **Returns:**
      -seen (bool): whether or not the given user had seen the given
      snapshot

seenUtils.setCommentAsSeen(comment_id, user_email)

   **Explanation:**
      Sets a comment as seen by the given user

   **Args:**
      -comment_id (int): id of the comment -user_email (str): email of
      the user

   **Returns:**
      -True

seenUtils.setCommentAsSeenForAllUsers(comment_id)

   **Explanation:**
      Sets a comment as seen by all users

   **Args:**
      -comment_id (int): id of the comment

   **Returns:**
      -True

seenUtils.setCommentAsUnseen(comment_id, user_email)

   **Explanation:**
      Sets a comment as unseen by the given user

   **Args:**
      -comment_id (int): id of the comment -user_email (str): email of
      the user

   **Returns:**
      -seen (bool): Returns True if it succeeded. Returns False if
      comment was already unseen.

seenUtils.setCommentAsUnseenForAllProjUsersOtherThanMaker(comment_id, user_email, proj_id)

   **Explanation:**
      Sets a comment as unseen by all users on the project other than
      the given user

   **Args:**
      -comment_id (int): id of the comment -user_email (str): email of
      the user to keep as seen -proj_id (int): id of the project

   **Returns:**
      -True

seenUtils.setSnapAsSeenForAllUsers(snapshot_id)

   **Explanation:**
      Sets a snapshot as seen by all users

   **Args:**
      -snapshot_id (int): id of the snapshot

   **Returns:**
      -True

seenUtils.setSnapAsUnseenForAllProjUsersOtherThanMaker(snapshot_id, user_email, proj_id)

   **Explanation:**
      Sets a snapshot as unseen by all users on the project other than
      the given user

   **Args:**
      -snapshot_id (int): id of the snapshot -user_email (str): email
      of the user to keep as seen -proj_id (int): id of the project

   **Returns:**
      -True

seenUtils.setSnapshotAsSeen(snapshot_id, user_email)

   **Explanation:**
      Sets a snapshot as seen by the given user

   **Args:**
      -snapshot_id (int): id of the snapshot -user_email (str): email
      of the user

   **Returns:**
      -True

seenUtils.setSnapshotAsUnseen(snapshot_id, user_email)

   **Explanation:**
      Sets a snapshot as unseen by the given user

   **Args:**
      -snapshot_id (int): id of the snapshot -user_email (str): email
      of the user

   **Returns:**
      -seen (bool): Returns True if it succeeded. Returns False if
      snapshot was already unseen.
