documentRoutes module
*********************

documentRoutes.changeDocumentSnapshot(doc_id, commit_id, snapshot_id)

   "POST /api/Document/<doc_id>/<commit_id>/<snapshot_id>/changeTo/"

   **Explanation:**
      This endpoint changes the document identified by 'doc_id' and
      'commit_id' to the snapshot identified by 'snapshot_id'. It
      requires authentication via an Authorization token header. Only
      users with sufficient permissions can change document snapshots.

   **Args:**
      * doc_id (int): The identifier of the document.

      * commit_id (int): The identifier of the commit.

      * snapshot_id (int): The identifier of the snapshot to change
        to.

   Returns:
      A dictionary containing the following keys:
         * success (bool): Indicates whether the operation was
           successful.

         * reason (str): Description of the success or failure reason.

         * body (str): An empty string representing the body of the
           response.

documentRoutes.createDocument(proj_id, commit_id)

   "POST /api/Document/<proj_id>/<commit_id>/"

   **Explanation:**
      Creates a document in the given commit. This will also
      automatically generate a snapshot for the document with the
      given data. Enforces permissions through credentials given in
      Authorization header.

   **Args:**
      * proj_id (int): The project ID.

      * commit_id (int): The commit ID.

      * request.body (dict):
           * doc_name (str): name of document

           * data (str): text you want in the document

           * parent_folder(int): Optional; if not in request will put
             in root folder

   **Returns:**
      A dictionary containing the following keys:
         * success (bool): Indicates whether the creation was
           successful.

         * reason (str): Description of the result of the creation.

         * body (str): ID of the created document.

documentRoutes.deleteDocument(doc_id, commit_id)

   "DELETE /api/Document/<doc_id>/<commit_id>/"

   **Explanation:**
      Deletes a document from the given commit. This will also purge
      any snapshots that originated from that document in that commit.
      Enforces permissions through credentials given in Authorization
      header.

   **Args:**
      doc_id (int): The document ID. commit_id (int): The commit ID.

   **Returns:**
      A dictionary containing the following keys:
         * success (bool): Indicates whether the deletion was
           successful.

         * reason (str): Description of the result of the deletion.

documentRoutes.getAllCommentsForDocument(document_id)

   "GET /api/Document/<document_id>/comments/"

   **Explanation:**
      Gets all comments on a document across all committed snapshots.
      Enforces permissions through credentials given in Authorization
      header.

   **Args:**
      * document_id (int): The identifier of the document.

   **Returns:**
      A dictionary containing the following keys:
         * success (bool): Indicates whether the operation was
           successful.

         * reason (str): Description of the success or failure reason.

         * body (list): A list of dictionaries representing comments
           associated with the document.
              Each dictionary contains information about a single
              comment.

documentRoutes.getAllDocumentCommittedSnapshots(proj_id, doc_id)

   "GET /api/Document/<proj_id>/<doc_id>/getSnapshotId/"

   **Explanation:**
      Returns every snapshot associated with this document and
      committed commits. Enforces permissions through credentials
      given in Authorization header.

   **Args:**
      * proj_id (int): The project id the document is in

      * doc_id (int): The id of the document

   **Returns:**
      A dictionary containing the following keys:
         * success (bool): Whether or not the request succeeded

         * reason (str): The reason

         * body (list): A list of dicts of the format
              {"snapshot": A Snapshot object in the form of a dict
                 "commit": A Commit object in the form of a dict, this
                 is the commit that the snapshot above was originally
                 associated with

              }

documentRoutes.getAllDocumentCommittedSnapshotsIncludingWorking(proj_id, doc_id)

   "GET /api/Document/<proj_id>/<doc_id>/getSnapshotIdAndWorking/"

   **Explanation:**
      Returns every snapshot associated with this document and
      committed commits. Also return the snapshots associated with any
      working commits of the user sending the request based off the
      authentication headers. Enforces permissions through credentials
      given in Authorization header.

   **Args:**
      * proj_id (int): The project id the document is in

      * doc_id (int): The id of the document

   **Returns:**
      A dictionary containing the following keys:
         * success (bool): Whether or not the request succeeded

         * reason (str): The reason

         * body (list): A list of dicts of the format
           {"snapshot":'information about a snapshot',
           "commit":'information about the commit the snapshot is
           originally from'}

documentRoutes.getDocument(proj_id, doc_id, commit_id)

   "GET /api/Document/<proj_id>/<doc_id>/<commit_id>/"

   **Explanation:**
      Gets the document information in the commit given. Enforces
      permissions through credentials given in Authorization header.

   **Args:**
      * proj_id (int): The project ID.

      * doc_id (int): The document ID.

      * commit_id (int): The commit ID.

   **Returns:**
      A dictionary containing the following keys:
         * success (bool): Indicates whether the retrieval was
           successful.

         * reason (str): Description of the result of the retrieval.

         * body (dict): Document information.

documentRoutes.moveDocument(doc_id, commit_id)

   "POST /api/Document/<doc_id>/<commit_id>/move/"

   **Explanation:**
      Moves a document. Enforces permissions through credentials given
      in Authorization header.

   **Args:**
      * doc_id (int): The document ID

      * commit_id (int): The commit you're doing action on

      * request.body (dict):
           * parent_folder (int): folder you're moving it to

   **Returns:**
      A dictionary containing the following keys:
         * success (bool): Indicates whether the operation was
           successful.

         * reason (str): Description of the success or failure reason.

         * body (str): An empty string representing the body of the
           response.

documentRoutes.renameDocument(doc_id, commit_id)

   "POST /api/Document/<doc_id>/<commit_id>/rename/"

   **Explanation:**
      Renames a document. Enforces permissions through credentials
      given in Authorization header.

   **Args:**
      * doc_id (int): The document ID

      * commit_id (int): the commit you're changing the name of

      * request.body(dict):
           * doc_name (str): new name

   **Returns:**
      A dictionary containing the following keys:
         * success (bool): Indicates whether the operation was
           successful.

         * reason (str): Description of the success or failure reason.
