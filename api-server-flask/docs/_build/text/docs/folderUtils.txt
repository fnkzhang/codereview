folderUtils module
******************

folderUtils.addItemToCorrectTypeList(item, folders, arrayOfDocuments, commit_id)

   **Explanation:**
      Adds the given item to either the folders or arrayOfDocuments
      lists depending on its type

   **Args:**
      -item (dict): A dict representation of a ItemCommitLocation
      object -folders (list): a list to add folders to
      -arrayOfDocuments (list): a list to add documents to -commit_id
      (int): id of the commit

   **Returns:**
      -True

folderUtils.appendFolderTreeToList(folderlist, folder_id, commit_id)

   **Explanation:**
      Gets the folder tree of the folder given and appends it to the
      given list

   **Args:**
      -folderlist (list): list to append the tree to -folder_id (int):
      id of the folder to get the tree of -commit_id (int): id of the
      commit this takes place in

   **Returns:**
      * tree (dict): The top level of the dict is a Folder object
        represented as a dict. It has the added key of "contents",
        which maps to another dict, which has 2 keys of "folders" and
        "documents". These keys map to lists of dicts of their
        respective items within the folder. The folders also have the
        "contents" key added, which map to their own contents.

folderUtils.createNewFolder(folder_name, parent_folder, proj_id, commit_id)

   **Explanation:**
      Creates a new folder for a commit in a project

   **Args:**
      -folder_name (int): name of the folder -parent_folder (int): id
      of the folder's parent folder -proj_id (int): id of the project
      this is for -commit_id (int): commit this is happening on

   **Returns:**
      -folder_id (int): id of the newly created folder

folderUtils.deleteFolderFromCommit(folder_id, commit_id)

   **Explanation:**
      Deletes a folder from a commit. The folder will persist in other
      existing commits. Will also recursively delete all folder
      contents

   **Args:**
      -folder_id (int): id of the folder to delete -commit_id (int):
      id of the commit to delete from

   **Returns:**
      -success (bool): success -error message (str): if there was an
      error, returns the message, if not, returns None

folderUtils.getAllFolderContents(folder_id, commit_id)

   **Explanation:**
      Gets all contents of a folder in a commit

   **Args:**
      -folder_id (int): id of the folder -commit_id (int): id of the
      commit

   **Returns:**
      -contents (dict): A dict with 2 keys of "folders" and
      "documents", which map to lists of the respective items that are
      in the folder given

folderUtils.getFolderInfo(folder_id, commit_id)

   **Explanation:**
      Gets a folder's information from a specific commit

   **Args:**
      -folder_id (int): id of the folder -commit_id (int): id of the
      commit

   **Returns:**
      -folder (dict): A Folder object as a dict with
      ItemCommitLocation object "parent_folder" and "name" fields
      added

folderUtils.getFolderInfoViaLocation(name, parent_folder, commit_id)

   **Explanation:**
      Gets a folder's information from a specific commit using the
      name and parent folder instead of id

   **Args:**
      -name (str): name of the folder -parent_folder (int): id of the
      folder's parent folder -commit_id (int): id of the commit

   **Returns:**
      -folder (dict): A Folder object as a dict with
      ItemCommitLocation object "parent_folder" and "name" fields
      added

folderUtils.getFolderPath(folder_id, commit_id)

   **Explanation:**
      Gets the given folder's path in the commit as a string; e.g:
      Folder2 resides in Folder1, which resides in the roote folder
      would be Folder1/Folder2/

   **Args:**
      -folder_id (folder): id of the folder -commit_id (int): id of
      the commit

   **Returns:**
      -folderPath (str): The folder's path as a string

folderUtils.getFolderPathsFromList(folder_id, current_path, list_of_folders)

   **Explanation:**
      Gets all of the folders in the list as paths; e.g: if folder2 is
      in folder1, which is in the root folder of the commit, the path
      would be folder1/folder2/

   **Args:**
      -folder_id (int): id of the current folder in the list being
      added -current_path (str): current path of the folder
      -list_of_folders: a list of all the folders as a tree in the
      order of breadth first search

   **Returns:**
      -folderIDToPath (dict): dict with folder ids mapping to their
      path

folderUtils.getFolderTree(folder_id, commit_id)

   **Explanation:**
      Gets all contents of a folder in a tree structure

   **Args:**
      -folder_id (int): id of the folder -commit_id (int): id of the
      commit this is happening in

   **Returns:**
      * tree (dict): The top level of the dict is a Folder object
        represented as a dict. It has the added key of "contents",
        which maps to another dict, which has 2 keys of "folders" and
        "documents". These keys map to lists of dicts of their
        respective items within the folder. The folders also have the
        "contents" key added, which map to their own contents.

folderUtils.purgeFolderUtil(folder_id)

   **Explanation:**
      Deletes a folder from the database entirely.

   **Args:**
      -folder_id (int): id of the folder to delete

   **Returns:**
      -success (bool): success -error message (str): if there was an
      error, returns the message, if not, returns None
