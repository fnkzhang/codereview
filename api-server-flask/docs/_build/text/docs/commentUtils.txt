commentUtils module
*******************

commentUtils.createNewComment(snapshot_id, author_email, reply_to_id, content, highlight_start_x, highlight_start_y, highlight_end_x, highlight_end_y, is_resolved)

   **Explanation:**
      Creates a comment with the given informatioin

   **Args:**
      * snapshot_id (str): The ID of the snapshot.

      * author_email (str): The email of the author of the comment.

      * reply_to_id (int): The ID of the comment being replied to.
        Defaults to 0 if not specified.

      * content (str): The content of the comment.

      * highlight_start_x (int): The x-coordinate of the start of the
        highlighted area.

      * highlight_start_y (int): The y-coordinate of the start of the
        highlighted area.

      * highlight_end_x (int): The x-coordinate of the end of the
        highlighted area.

      * highlight_end_y (int): The y-coordinate of the end of the
        highlighted area.

      * is_resolved (bool): Indicates whether the comment is resolved.

   **Returns:**
      -comment_id (int): Id of the newly created comment

commentUtils.filterCommentsByPredicate(predicate)

   **Explanation:**
      Filters the comments database for all comments that satisfy the
      given predicate and returns the comments as a list.

   **Args:**
      -predicate (predicate): An SQL column expression that either
      returns True or False.

   **Returns:**
      -commentsList (list): list of comment objects as dicts

commentUtils.getCommentInfo(comment_id)

   **Explanation:**
      Returns a Comment object as a dict

   **Args:**
      -comment_id (int): id of the comment

   **Returns:**
      -comment (dict): Comment as a dict

commentUtils.getCommentProject(comment_id)

   **Explanation:**
      Returns the project id of the project the comment is associated
      with

   **Args:**
      -comment_id (int): Id of the comment.

   **Returns:**
      -proj_id (int): Id of the project

commentUtils.purgeComment(comment_id)

   **Explanation:**
      Completely removes a comment from the database, including all
      references to it

   **Args:**
      -comment_id (int): id of the comment

   **Returns:**
      -True

commentUtils.resolveCommentHelperFunction(comment_id)

   **Explanation:**
      Resolves a comment

   **Args:**
      -comment_id: Id of the comment.
