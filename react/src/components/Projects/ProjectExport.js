import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import GitHubStatus from "../GitHub/GitHubStatus.js";
import LoadingSpinner from "../Loading/LoadingSpinner.js";
import CommitDropdown from "../Commits/CommitDropdown.js";
import { Button, Label, TextInput } from "flowbite-react";
import { pushToExistingBranch, getCommits } from "../../api/APIUtils";
import { useNavigate } from "react-router";
import BackButton from "../Buttons/BackButton";

export default function ProjectExport( props ) {

  const [gitRepo, setGitRepo] = useState("");
  const [repoBranch, setRepoBranch] = useState("");
  const [commits, setCommits] = useState([]);
  const [commit, setCommit] = useState(null);
  const [working, setWorking] = useState(false);
  const [isError, setIsError] = useState(false);
  const navigate = useNavigate();

  const { project_id } = useParams()

  useEffect(() => {
    async function getCommitData() {
        let result = await getCommits(project_id)
        result = result.body.filter((commit) => commit.date_committed !== null).reverse()
        setCommits(result)
        setCommit(result[0])
    }

    if (props.isLoggedIn)
      getCommitData()
}, [project_id, props.isLoggedIn])

  const handleExportProject = async (e) => {
    e.preventDefault() // Prevent form submission
  
    setWorking(true)
  
    await pushToExistingBranch(project_id, gitRepo, repoBranch, commit.commit_id, "Automatic commit generated by codereview web-app.").then((result) => {
      if (result.success){
        navigate(`/Project/${project_id}/Commit/${commit.commit_id}`)
      } else {
        setWorking(false)
        setIsError(true)
      }
    })
  }

  if ( props.isLoggedIn === false ) {
    return (
      <div>
        <div className="m-20 text-center text-textcolor text-2xl">
          You must Log in to view this page.
        </div>
      </div>
    )
  }

  if ( props.connected === false ) {
    return(
      <div>
        <div>
          <BackButton
            location={`/Project/${project_id}/Commit/0`}
          />
        </div>
        <div className="flex justify-center mt-20">
          <form 
            className="flex max-w-lg flex-1 flex-col gap-4 text-textcolor bg-altBackground p-20 pt-10 rounded">
            <div className="text-textcolor">
              Connect to a GitHub account in order to export a project's contents.
              <div className="flex items-center justify-center text-center">
                <div className="border border-offwhite border-1 bg-alternative transition-colors 
                  duration-200 hover:bg-slate-500 w-1/3 rounded">
                  <GitHubStatus
                    connected={props.connected}
                    setConnected={props.setConnected}
                  />
                </div>
              </div>
            </div>
          </form>
        </div>
      </div>
    )
  }

  return (
    <div>
      <div>
        <BackButton
          location={`/Project/${project_id}/Commit/0`}
        />
      </div>
      <div className="flex justify-center mt-20">
        <form 
          className="flex max-w-lg flex-1 flex-col gap-4 text-textcolor bg-altBackground p-20 pt-10 rounded"
          onSubmit={handleExportProject}
        >
          <div>
            <div className="mb-5 block">
              <Label className="text-3xl" value="Export Project to GitHub"/>
            </div>
            <div className="mb-3 block">
              <Label className="text-2xl" value="Commit"/>
            </div>
            <CommitDropdown
              commits={commits}
              commit={commit}
              setCommit={setCommit}
            />
            <div className="mb-3 block">
              <Label className="text-2xl" value="Repository Name"/>
            </div>
            <TextInput className="text-black shadow-white" placeholder="Name of Repository" sizing="lg" onChange={(e) => setGitRepo(e.target.value)} shadow required/>
            <div className="mb-3 block">
              <Label className="text-2xl" value="Branch Name"/>
            </div>
            <TextInput className="text-black shadow-white" placeholder="Name of Branch" sizing="lg" onChange={(e) => setRepoBranch(e.target.value)} shadow required/>
          </div>

          {isError ? (<p className="text-red-600 text-xl">Error: Could Not Export Project</p>) : null}
          <Button type="submit" className="bg-alternative transition-colors duration-200 hover:bg-slate-500">Export</Button>

          <div className="flex justify-center">
            <LoadingSpinner active={working}/>
          </div>
        </form>
      </div>
    </div>
  )

}